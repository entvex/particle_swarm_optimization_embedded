// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module psosc_Setup (
        ap_clk,
        ap_rst,
        start,
        negativeFormula,
        c1,
        c2,
        complete,
        complete_ap_vld,
        psosc_setupDone_i,
        psosc_setupDone_o,
        psosc_setupDone_o_ap_vld,
        psosc_negFormula,
        psosc_negFormula_ap_vld,
        psosc_c1_cog,
        psosc_c1_cog_ap_vld,
        psosc_c2_soc,
        psosc_c2_soc_ap_vld,
        psosc_w,
        psosc_w_ap_vld,
        psosc_ax,
        psosc_ax_ap_vld,
        psosc_av,
        psosc_av_ap_vld,
        psosc_x1_global,
        psosc_x1_global_ap_vld,
        psosc_x2_global,
        psosc_x2_global_ap_vld,
        psosc_p_x1_address0,
        psosc_p_x1_ce0,
        psosc_p_x1_we0,
        psosc_p_x1_d0,
        psosc_p_x2_address0,
        psosc_p_x2_ce0,
        psosc_p_x2_we0,
        psosc_p_x2_d0,
        psosc_p_v1_address0,
        psosc_p_v1_ce0,
        psosc_p_v1_we0,
        psosc_p_v1_d0,
        psosc_p_v2_address0,
        psosc_p_v2_ce0,
        psosc_p_v2_we0,
        psosc_p_v2_d0,
        psosc_p_x1_best_address0,
        psosc_p_x1_best_ce0,
        psosc_p_x1_best_we0,
        psosc_p_x1_best_d0,
        psosc_p_x2_best_address0,
        psosc_p_x2_best_ce0,
        psosc_p_x2_best_we0,
        psosc_p_x2_best_d0
);

parameter    ap_ST_fsm_state2 = 44'd2;
parameter    ap_ST_fsm_state3 = 44'd4;
parameter    ap_ST_fsm_state4 = 44'd8;
parameter    ap_ST_fsm_state5 = 44'd16;
parameter    ap_ST_fsm_state6 = 44'd32;
parameter    ap_ST_fsm_state7 = 44'd64;
parameter    ap_ST_fsm_state8 = 44'd128;
parameter    ap_ST_fsm_state9 = 44'd256;
parameter    ap_ST_fsm_state10 = 44'd512;
parameter    ap_ST_fsm_state11 = 44'd1024;
parameter    ap_ST_fsm_state12 = 44'd2048;
parameter    ap_ST_fsm_state13 = 44'd4096;
parameter    ap_ST_fsm_state14 = 44'd8192;
parameter    ap_ST_fsm_state15 = 44'd16384;
parameter    ap_ST_fsm_state16 = 44'd32768;
parameter    ap_ST_fsm_state17 = 44'd65536;
parameter    ap_ST_fsm_state18 = 44'd131072;
parameter    ap_ST_fsm_state19 = 44'd262144;
parameter    ap_ST_fsm_state20 = 44'd524288;
parameter    ap_ST_fsm_state21 = 44'd1048576;
parameter    ap_ST_fsm_state22 = 44'd2097152;
parameter    ap_ST_fsm_state23 = 44'd4194304;
parameter    ap_ST_fsm_state24 = 44'd8388608;
parameter    ap_ST_fsm_state25 = 44'd16777216;
parameter    ap_ST_fsm_state26 = 44'd33554432;
parameter    ap_ST_fsm_state27 = 44'd67108864;
parameter    ap_ST_fsm_state28 = 44'd134217728;
parameter    ap_ST_fsm_state29 = 44'd268435456;
parameter    ap_ST_fsm_state30 = 44'd536870912;
parameter    ap_ST_fsm_state31 = 44'd1073741824;
parameter    ap_ST_fsm_state32 = 44'd2147483648;
parameter    ap_ST_fsm_state33 = 44'd4294967296;
parameter    ap_ST_fsm_state34 = 44'd8589934592;
parameter    ap_ST_fsm_state35 = 44'd17179869184;
parameter    ap_ST_fsm_state36 = 44'd34359738368;
parameter    ap_ST_fsm_state37 = 44'd68719476736;
parameter    ap_ST_fsm_state38 = 44'd137438953472;
parameter    ap_ST_fsm_state39 = 44'd274877906944;
parameter    ap_ST_fsm_state40 = 44'd549755813888;
parameter    ap_ST_fsm_state41 = 44'd1099511627776;
parameter    ap_ST_fsm_state42 = 44'd2199023255552;
parameter    ap_ST_fsm_state43 = 44'd4398046511104;
parameter    ap_ST_fsm_state44 = 44'd8796093022208;

input   ap_clk;
input   ap_rst;
input   start;
input   negativeFormula;
input  [31:0] c1;
input  [31:0] c2;
output   complete;
output   complete_ap_vld;
input   psosc_setupDone_i;
output   psosc_setupDone_o;
output   psosc_setupDone_o_ap_vld;
output   psosc_negFormula;
output   psosc_negFormula_ap_vld;
output  [31:0] psosc_c1_cog;
output   psosc_c1_cog_ap_vld;
output  [31:0] psosc_c2_soc;
output   psosc_c2_soc_ap_vld;
output  [31:0] psosc_w;
output   psosc_w_ap_vld;
output  [31:0] psosc_ax;
output   psosc_ax_ap_vld;
output  [31:0] psosc_av;
output   psosc_av_ap_vld;
output  [31:0] psosc_x1_global;
output   psosc_x1_global_ap_vld;
output  [31:0] psosc_x2_global;
output   psosc_x2_global_ap_vld;
output  [1:0] psosc_p_x1_address0;
output   psosc_p_x1_ce0;
output   psosc_p_x1_we0;
output  [31:0] psosc_p_x1_d0;
output  [1:0] psosc_p_x2_address0;
output   psosc_p_x2_ce0;
output   psosc_p_x2_we0;
output  [31:0] psosc_p_x2_d0;
output  [1:0] psosc_p_v1_address0;
output   psosc_p_v1_ce0;
output   psosc_p_v1_we0;
output  [31:0] psosc_p_v1_d0;
output  [1:0] psosc_p_v2_address0;
output   psosc_p_v2_ce0;
output   psosc_p_v2_we0;
output  [31:0] psosc_p_v2_d0;
output  [1:0] psosc_p_x1_best_address0;
output   psosc_p_x1_best_ce0;
output   psosc_p_x1_best_we0;
output  [31:0] psosc_p_x1_best_d0;
output  [1:0] psosc_p_x2_best_address0;
output   psosc_p_x2_best_ce0;
output   psosc_p_x2_best_we0;
output  [31:0] psosc_p_x2_best_d0;

reg complete_ap_vld;
reg psosc_setupDone_o_ap_vld;
reg psosc_negFormula_ap_vld;
reg psosc_c1_cog_ap_vld;
reg psosc_c2_soc_ap_vld;
reg psosc_w_ap_vld;
reg psosc_ax_ap_vld;
reg psosc_av_ap_vld;
reg psosc_x1_global_ap_vld;
reg psosc_x2_global_ap_vld;
reg[1:0] psosc_p_x1_address0;
reg psosc_p_x1_ce0;
reg psosc_p_x1_we0;
reg[1:0] psosc_p_x2_address0;
reg psosc_p_x2_ce0;
reg psosc_p_x2_we0;
reg[1:0] psosc_p_v1_address0;
reg psosc_p_v1_ce0;
reg psosc_p_v1_we0;
reg[1:0] psosc_p_v2_address0;
reg psosc_p_v2_ce0;
reg psosc_p_v2_we0;
reg[1:0] psosc_p_x1_best_address0;
reg psosc_p_x1_best_ce0;
reg psosc_p_x1_best_we0;
reg[1:0] psosc_p_x2_best_address0;
reg psosc_p_x2_best_ce0;
reg psosc_p_x2_best_we0;

(* fsm_encoding = "none" *) reg   [43:0] ap_CS_fsm;
wire   [0:0] phitmp_fu_876_p2;
reg   [0:0] tmp_1_phi_fu_869_p4;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_read_fu_150_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state39;
wire   [0:0] phitmp_fu_876_p0;
reg   [43:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 44'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(tmp_1_phi_fu_869_p4 == 1'd0))) begin
        complete_ap_vld = 1'b1;
    end else begin
        complete_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        psosc_av_ap_vld = 1'b1;
    end else begin
        psosc_av_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        psosc_ax_ap_vld = 1'b1;
    end else begin
        psosc_ax_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        psosc_c1_cog_ap_vld = 1'b1;
    end else begin
        psosc_c1_cog_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        psosc_c2_soc_ap_vld = 1'b1;
    end else begin
        psosc_c2_soc_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        psosc_negFormula_ap_vld = 1'b1;
    end else begin
        psosc_negFormula_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        psosc_p_v1_address0 = 32'd11;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        psosc_p_v1_address0 = 32'd10;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        psosc_p_v1_address0 = 32'd9;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        psosc_p_v1_address0 = 32'd8;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        psosc_p_v1_address0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        psosc_p_v1_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        psosc_p_v1_address0 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        psosc_p_v1_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        psosc_p_v1_address0 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        psosc_p_v1_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        psosc_p_v1_address0 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        psosc_p_v1_address0 = 32'd0;
    end else begin
        psosc_p_v1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state38))) begin
        psosc_p_v1_ce0 = 1'b1;
    end else begin
        psosc_p_v1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state38))) begin
        psosc_p_v1_we0 = 1'b1;
    end else begin
        psosc_p_v1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        psosc_p_v2_address0 = 32'd11;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        psosc_p_v2_address0 = 32'd10;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        psosc_p_v2_address0 = 32'd9;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        psosc_p_v2_address0 = 32'd8;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        psosc_p_v2_address0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        psosc_p_v2_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        psosc_p_v2_address0 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        psosc_p_v2_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        psosc_p_v2_address0 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        psosc_p_v2_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        psosc_p_v2_address0 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        psosc_p_v2_address0 = 32'd0;
    end else begin
        psosc_p_v2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state38))) begin
        psosc_p_v2_ce0 = 1'b1;
    end else begin
        psosc_p_v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state38))) begin
        psosc_p_v2_we0 = 1'b1;
    end else begin
        psosc_p_v2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        psosc_p_x1_address0 = 32'd11;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        psosc_p_x1_address0 = 32'd10;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        psosc_p_x1_address0 = 32'd9;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        psosc_p_x1_address0 = 32'd8;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        psosc_p_x1_address0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        psosc_p_x1_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        psosc_p_x1_address0 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        psosc_p_x1_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        psosc_p_x1_address0 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        psosc_p_x1_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        psosc_p_x1_address0 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        psosc_p_x1_address0 = 32'd0;
    end else begin
        psosc_p_x1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        psosc_p_x1_best_address0 = 32'd11;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        psosc_p_x1_best_address0 = 32'd10;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        psosc_p_x1_best_address0 = 32'd9;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        psosc_p_x1_best_address0 = 32'd8;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        psosc_p_x1_best_address0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        psosc_p_x1_best_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        psosc_p_x1_best_address0 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        psosc_p_x1_best_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        psosc_p_x1_best_address0 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        psosc_p_x1_best_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        psosc_p_x1_best_address0 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        psosc_p_x1_best_address0 = 32'd0;
    end else begin
        psosc_p_x1_best_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state39))) begin
        psosc_p_x1_best_ce0 = 1'b1;
    end else begin
        psosc_p_x1_best_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state39))) begin
        psosc_p_x1_best_we0 = 1'b1;
    end else begin
        psosc_p_x1_best_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state37))) begin
        psosc_p_x1_ce0 = 1'b1;
    end else begin
        psosc_p_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state37))) begin
        psosc_p_x1_we0 = 1'b1;
    end else begin
        psosc_p_x1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        psosc_p_x2_address0 = 32'd11;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        psosc_p_x2_address0 = 32'd10;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        psosc_p_x2_address0 = 32'd9;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        psosc_p_x2_address0 = 32'd8;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        psosc_p_x2_address0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        psosc_p_x2_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        psosc_p_x2_address0 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        psosc_p_x2_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        psosc_p_x2_address0 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        psosc_p_x2_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        psosc_p_x2_address0 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        psosc_p_x2_address0 = 32'd0;
    end else begin
        psosc_p_x2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        psosc_p_x2_best_address0 = 32'd11;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        psosc_p_x2_best_address0 = 32'd10;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        psosc_p_x2_best_address0 = 32'd9;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        psosc_p_x2_best_address0 = 32'd8;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        psosc_p_x2_best_address0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        psosc_p_x2_best_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        psosc_p_x2_best_address0 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        psosc_p_x2_best_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        psosc_p_x2_best_address0 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        psosc_p_x2_best_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        psosc_p_x2_best_address0 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        psosc_p_x2_best_address0 = 32'd0;
    end else begin
        psosc_p_x2_best_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state39))) begin
        psosc_p_x2_best_ce0 = 1'b1;
    end else begin
        psosc_p_x2_best_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state39))) begin
        psosc_p_x2_best_we0 = 1'b1;
    end else begin
        psosc_p_x2_best_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state37))) begin
        psosc_p_x2_ce0 = 1'b1;
    end else begin
        psosc_p_x2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state37))) begin
        psosc_p_x2_we0 = 1'b1;
    end else begin
        psosc_p_x2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        psosc_setupDone_o_ap_vld = 1'b1;
    end else begin
        psosc_setupDone_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        psosc_w_ap_vld = 1'b1;
    end else begin
        psosc_w_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        psosc_x1_global_ap_vld = 1'b1;
    end else begin
        psosc_x1_global_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        psosc_x2_global_ap_vld = 1'b1;
    end else begin
        psosc_x2_global_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((1'd0 == tmp_read_fu_150_p2)) begin
            tmp_1_phi_fu_869_p4 = 1'd0;
        end else if ((tmp_read_fu_150_p2 == 1'd1)) begin
            tmp_1_phi_fu_869_p4 = phitmp_fu_876_p2;
        end else begin
            tmp_1_phi_fu_869_p4 = 'bx;
        end
    end else begin
        tmp_1_phi_fu_869_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ~(tmp_1_phi_fu_869_p4 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign complete = 1'd0;

assign phitmp_fu_876_p0 = psosc_setupDone_i;

assign phitmp_fu_876_p2 = (phitmp_fu_876_p0 ^ 1'd1);

assign psosc_av = 32'd1065353216;

assign psosc_ax = 32'd1092616192;

assign psosc_c1_cog = c1;

assign psosc_c2_soc = c2;

assign psosc_negFormula = negativeFormula;

assign psosc_p_v1_d0 = 32'd0;

assign psosc_p_v2_d0 = 32'd0;

assign psosc_p_x1_best_d0 = 32'd0;

assign psosc_p_x1_d0 = 32'd0;

assign psosc_p_x2_best_d0 = 32'd0;

assign psosc_p_x2_d0 = 32'd0;

assign psosc_setupDone_o = 1'd1;

assign psosc_w = 32'd1061997773;

assign psosc_x1_global = 32'd0;

assign psosc_x2_global = 32'd0;

assign tmp_read_fu_150_p2 = start;

endmodule //psosc_Setup
