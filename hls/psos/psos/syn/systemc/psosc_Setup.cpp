// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "psosc_Setup.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic psosc_Setup::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic psosc_Setup::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<44> psosc_Setup::ap_ST_fsm_state2 = "10";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state3 = "100";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state4 = "1000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state5 = "10000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state6 = "100000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state7 = "1000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state8 = "10000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state9 = "100000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state10 = "1000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state11 = "10000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state12 = "100000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<44> psosc_Setup::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<32> psosc_Setup::ap_const_lv32_1 = "1";
const sc_lv<32> psosc_Setup::ap_const_lv32_2 = "10";
const sc_lv<1> psosc_Setup::ap_const_lv1_0 = "0";
const sc_lv<1> psosc_Setup::ap_const_lv1_1 = "1";
const sc_lv<32> psosc_Setup::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> psosc_Setup::ap_const_lv32_3 = "11";
const sc_lv<32> psosc_Setup::ap_const_lv32_4 = "100";
const sc_lv<32> psosc_Setup::ap_const_lv32_5 = "101";
const sc_lv<32> psosc_Setup::ap_const_lv32_6 = "110";
const sc_lv<32> psosc_Setup::ap_const_lv32_7 = "111";
const sc_lv<32> psosc_Setup::ap_const_lv32_8 = "1000";
const sc_lv<32> psosc_Setup::ap_const_lv32_9 = "1001";
const sc_lv<32> psosc_Setup::ap_const_lv32_A = "1010";
const sc_lv<32> psosc_Setup::ap_const_lv32_B = "1011";
const sc_lv<32> psosc_Setup::ap_const_lv32_3F4CCCCD = "111111010011001100110011001101";
const sc_lv<32> psosc_Setup::ap_const_lv32_41200000 = "1000001001000000000000000000000";
const sc_lv<32> psosc_Setup::ap_const_lv32_3F800000 = "111111100000000000000000000000";
const sc_lv<32> psosc_Setup::ap_const_lv32_28 = "101000";
const sc_lv<32> psosc_Setup::ap_const_lv32_29 = "101001";
const sc_lv<32> psosc_Setup::ap_const_lv32_2A = "101010";
const sc_lv<32> psosc_Setup::ap_const_lv32_C = "1100";
const sc_lv<32> psosc_Setup::ap_const_lv32_F = "1111";
const sc_lv<32> psosc_Setup::ap_const_lv32_12 = "10010";
const sc_lv<32> psosc_Setup::ap_const_lv32_15 = "10101";
const sc_lv<32> psosc_Setup::ap_const_lv32_18 = "11000";
const sc_lv<32> psosc_Setup::ap_const_lv32_1B = "11011";
const sc_lv<32> psosc_Setup::ap_const_lv32_1E = "11110";
const sc_lv<32> psosc_Setup::ap_const_lv32_21 = "100001";
const sc_lv<32> psosc_Setup::ap_const_lv32_24 = "100100";
const sc_lv<32> psosc_Setup::ap_const_lv32_D = "1101";
const sc_lv<32> psosc_Setup::ap_const_lv32_10 = "10000";
const sc_lv<32> psosc_Setup::ap_const_lv32_13 = "10011";
const sc_lv<32> psosc_Setup::ap_const_lv32_16 = "10110";
const sc_lv<32> psosc_Setup::ap_const_lv32_19 = "11001";
const sc_lv<32> psosc_Setup::ap_const_lv32_1C = "11100";
const sc_lv<32> psosc_Setup::ap_const_lv32_1F = "11111";
const sc_lv<32> psosc_Setup::ap_const_lv32_22 = "100010";
const sc_lv<32> psosc_Setup::ap_const_lv32_25 = "100101";
const sc_lv<32> psosc_Setup::ap_const_lv32_E = "1110";
const sc_lv<32> psosc_Setup::ap_const_lv32_11 = "10001";
const sc_lv<32> psosc_Setup::ap_const_lv32_14 = "10100";
const sc_lv<32> psosc_Setup::ap_const_lv32_17 = "10111";
const sc_lv<32> psosc_Setup::ap_const_lv32_1A = "11010";
const sc_lv<32> psosc_Setup::ap_const_lv32_1D = "11101";
const sc_lv<32> psosc_Setup::ap_const_lv32_20 = "100000";
const sc_lv<32> psosc_Setup::ap_const_lv32_23 = "100011";
const sc_lv<32> psosc_Setup::ap_const_lv32_26 = "100110";
const bool psosc_Setup::ap_const_boolean_1 = true;

psosc_Setup::psosc_Setup(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_complete);
    sensitive << ( tmp_1_phi_fu_869_p4 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_complete_ap_vld);
    sensitive << ( tmp_1_phi_fu_869_p4 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_phitmp_fu_876_p0);
    sensitive << ( psosc_setupDone_i );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_phitmp_fu_876_p2);
    sensitive << ( phitmp_fu_876_p0 );

    SC_METHOD(thread_psosc_av);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_psosc_av_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_psosc_ax);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_psosc_ax_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_psosc_c1_cog);
    sensitive << ( c1 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_psosc_c1_cog_ap_vld);
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_psosc_c2_soc);
    sensitive << ( c2 );
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_psosc_c2_soc_ap_vld);
    sensitive << ( ap_CS_fsm_state41 );

    SC_METHOD(thread_psosc_negFormula);
    sensitive << ( negativeFormula );
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_psosc_negFormula_ap_vld);
    sensitive << ( ap_CS_fsm_state42 );

    SC_METHOD(thread_psosc_p_v1_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_psosc_p_v1_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_psosc_p_v1_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_psosc_p_v1_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_psosc_p_v2_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_psosc_p_v2_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_psosc_p_v2_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_psosc_p_v2_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_psosc_p_x1_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_psosc_p_x1_best_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_psosc_p_x1_best_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_psosc_p_x1_best_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_psosc_p_x1_best_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_psosc_p_x1_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_psosc_p_x1_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_psosc_p_x1_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_psosc_p_x2_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_psosc_p_x2_best_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_psosc_p_x2_best_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_psosc_p_x2_best_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_psosc_p_x2_best_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_METHOD(thread_psosc_p_x2_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_psosc_p_x2_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_psosc_p_x2_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_psosc_setupDone_o);
    sensitive << ( ap_CS_fsm_state43 );

    SC_METHOD(thread_psosc_setupDone_o_ap_vld);
    sensitive << ( ap_CS_fsm_state43 );

    SC_METHOD(thread_psosc_w);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_psosc_w_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_psosc_x1_global);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_psosc_x1_global_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_psosc_x2_global);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_psosc_x2_global_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_1_phi_fu_869_p4);
    sensitive << ( phitmp_fu_876_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_read_fu_150_p2 );

    SC_METHOD(thread_tmp_read_fu_150_p2);
    sensitive << ( start );
    sensitive << ( tmp_1_phi_fu_869_p4 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_1_phi_fu_869_p4 );
    sensitive << ( ap_CS_fsm_state3 );

    ap_CS_fsm = "00000000000000000000000000000000000000000010";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "psosc_Setup_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, start, "(port)start");
    sc_trace(mVcdFile, negativeFormula, "(port)negativeFormula");
    sc_trace(mVcdFile, c1, "(port)c1");
    sc_trace(mVcdFile, c2, "(port)c2");
    sc_trace(mVcdFile, complete, "(port)complete");
    sc_trace(mVcdFile, complete_ap_vld, "(port)complete_ap_vld");
    sc_trace(mVcdFile, psosc_setupDone_i, "(port)psosc_setupDone_i");
    sc_trace(mVcdFile, psosc_setupDone_o, "(port)psosc_setupDone_o");
    sc_trace(mVcdFile, psosc_setupDone_o_ap_vld, "(port)psosc_setupDone_o_ap_vld");
    sc_trace(mVcdFile, psosc_negFormula, "(port)psosc_negFormula");
    sc_trace(mVcdFile, psosc_negFormula_ap_vld, "(port)psosc_negFormula_ap_vld");
    sc_trace(mVcdFile, psosc_c1_cog, "(port)psosc_c1_cog");
    sc_trace(mVcdFile, psosc_c1_cog_ap_vld, "(port)psosc_c1_cog_ap_vld");
    sc_trace(mVcdFile, psosc_c2_soc, "(port)psosc_c2_soc");
    sc_trace(mVcdFile, psosc_c2_soc_ap_vld, "(port)psosc_c2_soc_ap_vld");
    sc_trace(mVcdFile, psosc_w, "(port)psosc_w");
    sc_trace(mVcdFile, psosc_w_ap_vld, "(port)psosc_w_ap_vld");
    sc_trace(mVcdFile, psosc_ax, "(port)psosc_ax");
    sc_trace(mVcdFile, psosc_ax_ap_vld, "(port)psosc_ax_ap_vld");
    sc_trace(mVcdFile, psosc_av, "(port)psosc_av");
    sc_trace(mVcdFile, psosc_av_ap_vld, "(port)psosc_av_ap_vld");
    sc_trace(mVcdFile, psosc_x1_global, "(port)psosc_x1_global");
    sc_trace(mVcdFile, psosc_x1_global_ap_vld, "(port)psosc_x1_global_ap_vld");
    sc_trace(mVcdFile, psosc_x2_global, "(port)psosc_x2_global");
    sc_trace(mVcdFile, psosc_x2_global_ap_vld, "(port)psosc_x2_global_ap_vld");
    sc_trace(mVcdFile, psosc_p_x1_address0, "(port)psosc_p_x1_address0");
    sc_trace(mVcdFile, psosc_p_x1_ce0, "(port)psosc_p_x1_ce0");
    sc_trace(mVcdFile, psosc_p_x1_we0, "(port)psosc_p_x1_we0");
    sc_trace(mVcdFile, psosc_p_x1_d0, "(port)psosc_p_x1_d0");
    sc_trace(mVcdFile, psosc_p_x2_address0, "(port)psosc_p_x2_address0");
    sc_trace(mVcdFile, psosc_p_x2_ce0, "(port)psosc_p_x2_ce0");
    sc_trace(mVcdFile, psosc_p_x2_we0, "(port)psosc_p_x2_we0");
    sc_trace(mVcdFile, psosc_p_x2_d0, "(port)psosc_p_x2_d0");
    sc_trace(mVcdFile, psosc_p_v1_address0, "(port)psosc_p_v1_address0");
    sc_trace(mVcdFile, psosc_p_v1_ce0, "(port)psosc_p_v1_ce0");
    sc_trace(mVcdFile, psosc_p_v1_we0, "(port)psosc_p_v1_we0");
    sc_trace(mVcdFile, psosc_p_v1_d0, "(port)psosc_p_v1_d0");
    sc_trace(mVcdFile, psosc_p_v2_address0, "(port)psosc_p_v2_address0");
    sc_trace(mVcdFile, psosc_p_v2_ce0, "(port)psosc_p_v2_ce0");
    sc_trace(mVcdFile, psosc_p_v2_we0, "(port)psosc_p_v2_we0");
    sc_trace(mVcdFile, psosc_p_v2_d0, "(port)psosc_p_v2_d0");
    sc_trace(mVcdFile, psosc_p_x1_best_address0, "(port)psosc_p_x1_best_address0");
    sc_trace(mVcdFile, psosc_p_x1_best_ce0, "(port)psosc_p_x1_best_ce0");
    sc_trace(mVcdFile, psosc_p_x1_best_we0, "(port)psosc_p_x1_best_we0");
    sc_trace(mVcdFile, psosc_p_x1_best_d0, "(port)psosc_p_x1_best_d0");
    sc_trace(mVcdFile, psosc_p_x2_best_address0, "(port)psosc_p_x2_best_address0");
    sc_trace(mVcdFile, psosc_p_x2_best_ce0, "(port)psosc_p_x2_best_ce0");
    sc_trace(mVcdFile, psosc_p_x2_best_we0, "(port)psosc_p_x2_best_we0");
    sc_trace(mVcdFile, psosc_p_x2_best_d0, "(port)psosc_p_x2_best_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, phitmp_fu_876_p2, "phitmp_fu_876_p2");
    sc_trace(mVcdFile, tmp_1_phi_fu_869_p4, "tmp_1_phi_fu_869_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_read_fu_150_p2, "tmp_read_fu_150_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, phitmp_fu_876_p0, "phitmp_fu_876_p0");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

psosc_Setup::~psosc_Setup() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void psosc_Setup::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state2;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void psosc_Setup::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void psosc_Setup::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void psosc_Setup::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void psosc_Setup::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void psosc_Setup::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void psosc_Setup::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void psosc_Setup::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void psosc_Setup::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void psosc_Setup::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void psosc_Setup::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void psosc_Setup::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void psosc_Setup::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void psosc_Setup::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void psosc_Setup::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void psosc_Setup::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void psosc_Setup::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void psosc_Setup::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void psosc_Setup::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void psosc_Setup::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void psosc_Setup::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void psosc_Setup::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void psosc_Setup::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void psosc_Setup::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void psosc_Setup::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void psosc_Setup::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void psosc_Setup::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void psosc_Setup::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void psosc_Setup::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void psosc_Setup::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void psosc_Setup::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void psosc_Setup::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[38];
}

void psosc_Setup::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void psosc_Setup::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void psosc_Setup::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void psosc_Setup::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void psosc_Setup::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void psosc_Setup::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void psosc_Setup::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void psosc_Setup::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void psosc_Setup::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void psosc_Setup::thread_complete() {
    complete =  (sc_logic) (ap_const_lv1_0[0]);
}

void psosc_Setup::thread_complete_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !esl_seteq<1,1,1>(tmp_1_phi_fu_869_p4.read(), ap_const_lv1_0))) {
        complete_ap_vld = ap_const_logic_1;
    } else {
        complete_ap_vld = ap_const_logic_0;
    }
}

void psosc_Setup::thread_phitmp_fu_876_p0() {
    phitmp_fu_876_p0 =  (sc_lv<1>) (psosc_setupDone_i.read());
}

void psosc_Setup::thread_phitmp_fu_876_p2() {
    phitmp_fu_876_p2 = (phitmp_fu_876_p0.read() ^ ap_const_lv1_1);
}

void psosc_Setup::thread_psosc_av() {
    psosc_av = ap_const_lv32_3F800000;
}

void psosc_Setup::thread_psosc_av_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        psosc_av_ap_vld = ap_const_logic_1;
    } else {
        psosc_av_ap_vld = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_ax() {
    psosc_ax = ap_const_lv32_41200000;
}

void psosc_Setup::thread_psosc_ax_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        psosc_ax_ap_vld = ap_const_logic_1;
    } else {
        psosc_ax_ap_vld = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_c1_cog() {
    psosc_c1_cog = c1.read();
}

void psosc_Setup::thread_psosc_c1_cog_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        psosc_c1_cog_ap_vld = ap_const_logic_1;
    } else {
        psosc_c1_cog_ap_vld = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_c2_soc() {
    psosc_c2_soc = c2.read();
}

void psosc_Setup::thread_psosc_c2_soc_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read())) {
        psosc_c2_soc_ap_vld = ap_const_logic_1;
    } else {
        psosc_c2_soc_ap_vld = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_negFormula() {
    psosc_negFormula = negativeFormula.read();
}

void psosc_Setup::thread_psosc_negFormula_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
        psosc_negFormula_ap_vld = ap_const_logic_1;
    } else {
        psosc_negFormula_ap_vld = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_p_v1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        psosc_p_v1_address0 =  (sc_lv<2>) (ap_const_lv32_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        psosc_p_v1_address0 =  (sc_lv<2>) (ap_const_lv32_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        psosc_p_v1_address0 =  (sc_lv<2>) (ap_const_lv32_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        psosc_p_v1_address0 =  (sc_lv<2>) (ap_const_lv32_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        psosc_p_v1_address0 =  (sc_lv<2>) (ap_const_lv32_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        psosc_p_v1_address0 =  (sc_lv<2>) (ap_const_lv32_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        psosc_p_v1_address0 =  (sc_lv<2>) (ap_const_lv32_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        psosc_p_v1_address0 =  (sc_lv<2>) (ap_const_lv32_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        psosc_p_v1_address0 =  (sc_lv<2>) (ap_const_lv32_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        psosc_p_v1_address0 =  (sc_lv<2>) (ap_const_lv32_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        psosc_p_v1_address0 =  (sc_lv<2>) (ap_const_lv32_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        psosc_p_v1_address0 =  (sc_lv<2>) (ap_const_lv32_0);
    } else {
        psosc_p_v1_address0 = "XX";
    }
}

void psosc_Setup::thread_psosc_p_v1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        psosc_p_v1_ce0 = ap_const_logic_1;
    } else {
        psosc_p_v1_ce0 = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_p_v1_d0() {
    psosc_p_v1_d0 = ap_const_lv32_0;
}

void psosc_Setup::thread_psosc_p_v1_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        psosc_p_v1_we0 = ap_const_logic_1;
    } else {
        psosc_p_v1_we0 = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_p_v2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        psosc_p_v2_address0 =  (sc_lv<2>) (ap_const_lv32_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        psosc_p_v2_address0 =  (sc_lv<2>) (ap_const_lv32_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        psosc_p_v2_address0 =  (sc_lv<2>) (ap_const_lv32_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        psosc_p_v2_address0 =  (sc_lv<2>) (ap_const_lv32_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        psosc_p_v2_address0 =  (sc_lv<2>) (ap_const_lv32_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        psosc_p_v2_address0 =  (sc_lv<2>) (ap_const_lv32_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        psosc_p_v2_address0 =  (sc_lv<2>) (ap_const_lv32_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        psosc_p_v2_address0 =  (sc_lv<2>) (ap_const_lv32_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        psosc_p_v2_address0 =  (sc_lv<2>) (ap_const_lv32_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        psosc_p_v2_address0 =  (sc_lv<2>) (ap_const_lv32_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        psosc_p_v2_address0 =  (sc_lv<2>) (ap_const_lv32_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        psosc_p_v2_address0 =  (sc_lv<2>) (ap_const_lv32_0);
    } else {
        psosc_p_v2_address0 = "XX";
    }
}

void psosc_Setup::thread_psosc_p_v2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        psosc_p_v2_ce0 = ap_const_logic_1;
    } else {
        psosc_p_v2_ce0 = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_p_v2_d0() {
    psosc_p_v2_d0 = ap_const_lv32_0;
}

void psosc_Setup::thread_psosc_p_v2_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        psosc_p_v2_we0 = ap_const_logic_1;
    } else {
        psosc_p_v2_we0 = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_p_x1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        psosc_p_x1_address0 =  (sc_lv<2>) (ap_const_lv32_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        psosc_p_x1_address0 =  (sc_lv<2>) (ap_const_lv32_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        psosc_p_x1_address0 =  (sc_lv<2>) (ap_const_lv32_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        psosc_p_x1_address0 =  (sc_lv<2>) (ap_const_lv32_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        psosc_p_x1_address0 =  (sc_lv<2>) (ap_const_lv32_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        psosc_p_x1_address0 =  (sc_lv<2>) (ap_const_lv32_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        psosc_p_x1_address0 =  (sc_lv<2>) (ap_const_lv32_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        psosc_p_x1_address0 =  (sc_lv<2>) (ap_const_lv32_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        psosc_p_x1_address0 =  (sc_lv<2>) (ap_const_lv32_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        psosc_p_x1_address0 =  (sc_lv<2>) (ap_const_lv32_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        psosc_p_x1_address0 =  (sc_lv<2>) (ap_const_lv32_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        psosc_p_x1_address0 =  (sc_lv<2>) (ap_const_lv32_0);
    } else {
        psosc_p_x1_address0 = "XX";
    }
}

void psosc_Setup::thread_psosc_p_x1_best_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        psosc_p_x1_best_address0 =  (sc_lv<2>) (ap_const_lv32_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        psosc_p_x1_best_address0 =  (sc_lv<2>) (ap_const_lv32_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        psosc_p_x1_best_address0 =  (sc_lv<2>) (ap_const_lv32_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        psosc_p_x1_best_address0 =  (sc_lv<2>) (ap_const_lv32_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        psosc_p_x1_best_address0 =  (sc_lv<2>) (ap_const_lv32_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        psosc_p_x1_best_address0 =  (sc_lv<2>) (ap_const_lv32_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        psosc_p_x1_best_address0 =  (sc_lv<2>) (ap_const_lv32_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        psosc_p_x1_best_address0 =  (sc_lv<2>) (ap_const_lv32_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        psosc_p_x1_best_address0 =  (sc_lv<2>) (ap_const_lv32_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        psosc_p_x1_best_address0 =  (sc_lv<2>) (ap_const_lv32_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        psosc_p_x1_best_address0 =  (sc_lv<2>) (ap_const_lv32_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        psosc_p_x1_best_address0 =  (sc_lv<2>) (ap_const_lv32_0);
    } else {
        psosc_p_x1_best_address0 = "XX";
    }
}

void psosc_Setup::thread_psosc_p_x1_best_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        psosc_p_x1_best_ce0 = ap_const_logic_1;
    } else {
        psosc_p_x1_best_ce0 = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_p_x1_best_d0() {
    psosc_p_x1_best_d0 = ap_const_lv32_0;
}

void psosc_Setup::thread_psosc_p_x1_best_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        psosc_p_x1_best_we0 = ap_const_logic_1;
    } else {
        psosc_p_x1_best_we0 = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_p_x1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        psosc_p_x1_ce0 = ap_const_logic_1;
    } else {
        psosc_p_x1_ce0 = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_p_x1_d0() {
    psosc_p_x1_d0 = ap_const_lv32_0;
}

void psosc_Setup::thread_psosc_p_x1_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        psosc_p_x1_we0 = ap_const_logic_1;
    } else {
        psosc_p_x1_we0 = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_p_x2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        psosc_p_x2_address0 =  (sc_lv<2>) (ap_const_lv32_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        psosc_p_x2_address0 =  (sc_lv<2>) (ap_const_lv32_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        psosc_p_x2_address0 =  (sc_lv<2>) (ap_const_lv32_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        psosc_p_x2_address0 =  (sc_lv<2>) (ap_const_lv32_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        psosc_p_x2_address0 =  (sc_lv<2>) (ap_const_lv32_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        psosc_p_x2_address0 =  (sc_lv<2>) (ap_const_lv32_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        psosc_p_x2_address0 =  (sc_lv<2>) (ap_const_lv32_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        psosc_p_x2_address0 =  (sc_lv<2>) (ap_const_lv32_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        psosc_p_x2_address0 =  (sc_lv<2>) (ap_const_lv32_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        psosc_p_x2_address0 =  (sc_lv<2>) (ap_const_lv32_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        psosc_p_x2_address0 =  (sc_lv<2>) (ap_const_lv32_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        psosc_p_x2_address0 =  (sc_lv<2>) (ap_const_lv32_0);
    } else {
        psosc_p_x2_address0 = "XX";
    }
}

void psosc_Setup::thread_psosc_p_x2_best_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read())) {
        psosc_p_x2_best_address0 =  (sc_lv<2>) (ap_const_lv32_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        psosc_p_x2_best_address0 =  (sc_lv<2>) (ap_const_lv32_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        psosc_p_x2_best_address0 =  (sc_lv<2>) (ap_const_lv32_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        psosc_p_x2_best_address0 =  (sc_lv<2>) (ap_const_lv32_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        psosc_p_x2_best_address0 =  (sc_lv<2>) (ap_const_lv32_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        psosc_p_x2_best_address0 =  (sc_lv<2>) (ap_const_lv32_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        psosc_p_x2_best_address0 =  (sc_lv<2>) (ap_const_lv32_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        psosc_p_x2_best_address0 =  (sc_lv<2>) (ap_const_lv32_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        psosc_p_x2_best_address0 =  (sc_lv<2>) (ap_const_lv32_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        psosc_p_x2_best_address0 =  (sc_lv<2>) (ap_const_lv32_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        psosc_p_x2_best_address0 =  (sc_lv<2>) (ap_const_lv32_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        psosc_p_x2_best_address0 =  (sc_lv<2>) (ap_const_lv32_0);
    } else {
        psosc_p_x2_best_address0 = "XX";
    }
}

void psosc_Setup::thread_psosc_p_x2_best_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        psosc_p_x2_best_ce0 = ap_const_logic_1;
    } else {
        psosc_p_x2_best_ce0 = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_p_x2_best_d0() {
    psosc_p_x2_best_d0 = ap_const_lv32_0;
}

void psosc_Setup::thread_psosc_p_x2_best_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()))) {
        psosc_p_x2_best_we0 = ap_const_logic_1;
    } else {
        psosc_p_x2_best_we0 = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_p_x2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        psosc_p_x2_ce0 = ap_const_logic_1;
    } else {
        psosc_p_x2_ce0 = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_p_x2_d0() {
    psosc_p_x2_d0 = ap_const_lv32_0;
}

void psosc_Setup::thread_psosc_p_x2_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        psosc_p_x2_we0 = ap_const_logic_1;
    } else {
        psosc_p_x2_we0 = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_setupDone_o() {
    psosc_setupDone_o =  (sc_logic) (ap_const_lv1_1[0]);
}

void psosc_Setup::thread_psosc_setupDone_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
        psosc_setupDone_o_ap_vld = ap_const_logic_1;
    } else {
        psosc_setupDone_o_ap_vld = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_w() {
    psosc_w = ap_const_lv32_3F4CCCCD;
}

void psosc_Setup::thread_psosc_w_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        psosc_w_ap_vld = ap_const_logic_1;
    } else {
        psosc_w_ap_vld = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_x1_global() {
    psosc_x1_global = ap_const_lv32_0;
}

void psosc_Setup::thread_psosc_x1_global_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        psosc_x1_global_ap_vld = ap_const_logic_1;
    } else {
        psosc_x1_global_ap_vld = ap_const_logic_0;
    }
}

void psosc_Setup::thread_psosc_x2_global() {
    psosc_x2_global = ap_const_lv32_0;
}

void psosc_Setup::thread_psosc_x2_global_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        psosc_x2_global_ap_vld = ap_const_logic_1;
    } else {
        psosc_x2_global_ap_vld = ap_const_logic_0;
    }
}

void psosc_Setup::thread_tmp_1_phi_fu_869_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_read_fu_150_p2.read())) {
            tmp_1_phi_fu_869_p4 = ap_const_lv1_0;
        } else if (esl_seteq<1,1,1>(tmp_read_fu_150_p2.read(), ap_const_lv1_1)) {
            tmp_1_phi_fu_869_p4 = phitmp_fu_876_p2.read();
        } else {
            tmp_1_phi_fu_869_p4 =  (sc_lv<1>) ("X");
        }
    } else {
        tmp_1_phi_fu_869_p4 =  (sc_lv<1>) ("X");
    }
}

void psosc_Setup::thread_tmp_read_fu_150_p2() {
    tmp_read_fu_150_p2 =  (sc_lv<1>) (start.read());
}

void psosc_Setup::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !esl_seteq<1,1,1>(tmp_1_phi_fu_869_p4.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<44>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

