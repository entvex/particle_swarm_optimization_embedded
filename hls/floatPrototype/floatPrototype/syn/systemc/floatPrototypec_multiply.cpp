// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "floatPrototypec_multiply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic floatPrototypec_multiply::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic floatPrototypec_multiply::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> floatPrototypec_multiply::ap_ST_fsm_state1 = "1";
const sc_lv<4> floatPrototypec_multiply::ap_ST_fsm_state2 = "10";
const sc_lv<4> floatPrototypec_multiply::ap_ST_fsm_state3 = "100";
const sc_lv<4> floatPrototypec_multiply::ap_ST_fsm_state4 = "1000";
const sc_lv<32> floatPrototypec_multiply::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> floatPrototypec_multiply::ap_const_lv32_3 = "11";
const bool floatPrototypec_multiply::ap_const_boolean_1 = true;

floatPrototypec_multiply::floatPrototypec_multiply(sc_module_name name) : sc_module(name), mVcdFile(0) {
    floatPrototypec_fbkb_U0 = new floatPrototypec_fbkb<1,4,32,32,32>("floatPrototypec_fbkb_U0");
    floatPrototypec_fbkb_U0->clk(ap_clk);
    floatPrototypec_fbkb_U0->reset(ap_rst);
    floatPrototypec_fbkb_U0->din0(float1);
    floatPrototypec_fbkb_U0->din1(float2);
    floatPrototypec_fbkb_U0->ce(ap_var_for_const0);
    floatPrototypec_fbkb_U0->dout(grp_fu_83_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_float3);
    sensitive << ( grp_fu_83_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_float3_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "floatPrototypec_multiply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, float1, "(port)float1");
    sc_trace(mVcdFile, float2, "(port)float2");
    sc_trace(mVcdFile, float3, "(port)float3");
    sc_trace(mVcdFile, float3_ap_vld, "(port)float3_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_83_p2, "grp_fu_83_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

floatPrototypec_multiply::~floatPrototypec_multiply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete floatPrototypec_fbkb_U0;
}

void floatPrototypec_multiply::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void floatPrototypec_multiply::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void floatPrototypec_multiply::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void floatPrototypec_multiply::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void floatPrototypec_multiply::thread_float3() {
    float3 = grp_fu_83_p2.read();
}

void floatPrototypec_multiply::thread_float3_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        float3_ap_vld = ap_const_logic_1;
    } else {
        float3_ap_vld = ap_const_logic_0;
    }
}

void floatPrototypec_multiply::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

