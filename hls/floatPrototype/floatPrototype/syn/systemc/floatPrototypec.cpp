// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "floatPrototypec.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic floatPrototypec::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> floatPrototypec::ap_const_lv1_0 = "0";
const sc_lv<32> floatPrototypec::ap_const_lv32_1 = "1";
const sc_lv<1> floatPrototypec::ap_const_lv1_1 = "1";
const sc_lv<2> floatPrototypec::ap_const_lv2_0 = "00";
const sc_logic floatPrototypec::ap_const_logic_0 = sc_dt::Log_0;
const bool floatPrototypec::ap_const_boolean_1 = true;

floatPrototypec::floatPrototypec(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_floatPrototypec_multiply_fu_60 = new floatPrototypec_multiply("grp_floatPrototypec_multiply_fu_60");
    grp_floatPrototypec_multiply_fu_60->ap_clk(clk);
    grp_floatPrototypec_multiply_fu_60->ap_rst(reset);
    grp_floatPrototypec_multiply_fu_60->float1(float1);
    grp_floatPrototypec_multiply_fu_60->float2(float2);
    grp_floatPrototypec_multiply_fu_60->float3(grp_floatPrototypec_multiply_fu_60_float3);
    grp_floatPrototypec_multiply_fu_60->float3_ap_vld(grp_floatPrototypec_multiply_fu_60_float3_ap_vld);

    SC_METHOD(thread_float3);
    dont_initialize();
    sensitive << ( clk.pos() );

    SC_METHOD(thread_ap_CS_fsm);

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_floatPrototypec_s_load_fu_74_p1);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( clk.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "floatPrototypec_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clk, "(port)clk");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, float1, "(port)float1");
    sc_trace(mVcdFile, float2, "(port)float2");
    sc_trace(mVcdFile, float3, "(port)float3");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, floatPrototypec_s_load_fu_74_p1, "floatPrototypec_s_load_fu_74_p1");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, grp_floatPrototypec_multiply_fu_60_float3, "grp_floatPrototypec_multiply_fu_60_float3");
    sc_trace(mVcdFile, grp_floatPrototypec_multiply_fu_60_float3_ap_vld, "grp_floatPrototypec_multiply_fu_60_float3_ap_vld");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
#endif

    }
    mHdltvinHandle.open("floatPrototypec.hdltvin.dat");
    mHdltvoutHandle.open("floatPrototypec.hdltvout.dat");
}

floatPrototypec::~floatPrototypec() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_floatPrototypec_multiply_fu_60;
}

void floatPrototypec::thread_float3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, grp_floatPrototypec_multiply_fu_60_float3_ap_vld.read())) {
        float3 = grp_floatPrototypec_multiply_fu_60_float3.read();
    }
}

void floatPrototypec::thread_ap_CS_fsm() {
    ap_CS_fsm = ap_const_lv2_0;
}

void floatPrototypec::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void floatPrototypec::thread_floatPrototypec_s_load_fu_74_p1() {
    floatPrototypec_s_load_fu_74_p1 = ap_const_lv1_0;
}

void floatPrototypec::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"reset\" :  \"" << reset.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"float1\" :  \"" << float1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"float2\" :  \"" << float2.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"float3\" :  \"" << float3.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

