// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module particlemaster_Setup (
        ap_clk,
        ap_rst,
        start,
        maximum,
        maximum_ap_vld,
        setup,
        setup_ap_vld,
        negativeFormula,
        c1,
        c2,
        cognitive,
        cognitive_ap_vld,
        social,
        social_ap_vld,
        particlemaster_setupDone_i,
        particlemaster_setupDone_o,
        particlemaster_setupDone_o_ap_vld,
        particlemaster_negFormula,
        particlemaster_negFormula_ap_vld,
        particlemaster_iterations,
        particlemaster_iterations_ap_vld
);

parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   start;
output   maximum;
output   maximum_ap_vld;
output   setup;
output   setup_ap_vld;
input   negativeFormula;
input  [31:0] c1;
input  [31:0] c2;
output  [31:0] cognitive;
output   cognitive_ap_vld;
output  [31:0] social;
output   social_ap_vld;
input   particlemaster_setupDone_i;
output   particlemaster_setupDone_o;
output   particlemaster_setupDone_o_ap_vld;
output   particlemaster_negFormula;
output   particlemaster_negFormula_ap_vld;
output  [31:0] particlemaster_iterations;
output   particlemaster_iterations_ap_vld;

reg maximum_ap_vld;
reg setup;
reg setup_ap_vld;
reg cognitive_ap_vld;
reg social_ap_vld;
reg particlemaster_setupDone_o_ap_vld;
reg particlemaster_negFormula_ap_vld;
reg particlemaster_iterations_ap_vld;

reg   [0:0] tmp_3118_reg_364;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
wire   [0:0] phitmp_fu_348_p2;
reg   [0:0] tmp_s_phi_fu_341_p4;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_read_fu_252_p2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire   [0:0] phitmp_fu_348_p0;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_3118_reg_364 <= negativeFormula;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cognitive_ap_vld = 1'b1;
    end else begin
        cognitive_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        maximum_ap_vld = 1'b1;
    end else begin
        maximum_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        particlemaster_iterations_ap_vld = 1'b1;
    end else begin
        particlemaster_iterations_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        particlemaster_negFormula_ap_vld = 1'b1;
    end else begin
        particlemaster_negFormula_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        particlemaster_setupDone_o_ap_vld = 1'b1;
    end else begin
        particlemaster_setupDone_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        setup = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_s_phi_fu_341_p4 == 1'd0))) begin
        setup = 1'd0;
    end else begin
        setup = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(tmp_s_phi_fu_341_p4 == 1'd0)) | (1'b1 == ap_CS_fsm_state6))) begin
        setup_ap_vld = 1'b1;
    end else begin
        setup_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        social_ap_vld = 1'b1;
    end else begin
        social_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((1'd0 == tmp_read_fu_252_p2)) begin
            tmp_s_phi_fu_341_p4 = 1'd0;
        end else if ((tmp_read_fu_252_p2 == 1'd1)) begin
            tmp_s_phi_fu_341_p4 = phitmp_fu_348_p2;
        end else begin
            tmp_s_phi_fu_341_p4 = 'bx;
        end
    end else begin
        tmp_s_phi_fu_341_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_s_phi_fu_341_p4 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign cognitive = c1;

assign maximum = tmp_3118_reg_364;

assign particlemaster_iterations = 32'd60;

assign particlemaster_negFormula = negativeFormula;

assign particlemaster_setupDone_o = 1'd1;

assign phitmp_fu_348_p0 = particlemaster_setupDone_i;

assign phitmp_fu_348_p2 = (phitmp_fu_348_p0 ^ 1'd1);

assign social = c2;

assign tmp_read_fu_252_p2 = start;

endmodule //particlemaster_Setup
