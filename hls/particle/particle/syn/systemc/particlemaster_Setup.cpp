// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "particlemaster_Setup.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic particlemaster_Setup::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic particlemaster_Setup::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> particlemaster_Setup::ap_ST_fsm_state2 = "10";
const sc_lv<7> particlemaster_Setup::ap_ST_fsm_state3 = "100";
const sc_lv<7> particlemaster_Setup::ap_ST_fsm_state4 = "1000";
const sc_lv<7> particlemaster_Setup::ap_ST_fsm_state5 = "10000";
const sc_lv<7> particlemaster_Setup::ap_ST_fsm_state6 = "100000";
const sc_lv<7> particlemaster_Setup::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> particlemaster_Setup::ap_const_lv32_3 = "11";
const sc_lv<32> particlemaster_Setup::ap_const_lv32_1 = "1";
const sc_lv<1> particlemaster_Setup::ap_const_lv1_0 = "0";
const sc_lv<1> particlemaster_Setup::ap_const_lv1_1 = "1";
const sc_lv<32> particlemaster_Setup::ap_const_lv32_5 = "101";
const sc_lv<32> particlemaster_Setup::ap_const_lv32_2 = "10";
const sc_lv<32> particlemaster_Setup::ap_const_lv32_4 = "100";
const sc_lv<32> particlemaster_Setup::ap_const_lv32_3C = "111100";
const bool particlemaster_Setup::ap_const_boolean_1 = true;

particlemaster_Setup::particlemaster_Setup(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_cognitive);
    sensitive << ( c1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cognitive_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_maximum);
    sensitive << ( tmp_3118_reg_364 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_maximum_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_particlemaster_iterations);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_particlemaster_iterations_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_particlemaster_negFormula);
    sensitive << ( negativeFormula );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_particlemaster_negFormula_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_particlemaster_setupDone_o);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_particlemaster_setupDone_o_ap_vld);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_phitmp_fu_348_p0);
    sensitive << ( particlemaster_setupDone_i );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_phitmp_fu_348_p2);
    sensitive << ( phitmp_fu_348_p0 );

    SC_METHOD(thread_setup);
    sensitive << ( tmp_s_phi_fu_341_p4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_setup_ap_vld);
    sensitive << ( tmp_s_phi_fu_341_p4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_social);
    sensitive << ( c2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_social_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_read_fu_252_p2);
    sensitive << ( start );
    sensitive << ( tmp_s_phi_fu_341_p4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_s_phi_fu_341_p4);
    sensitive << ( phitmp_fu_348_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_read_fu_252_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_s_phi_fu_341_p4 );
    sensitive << ( ap_CS_fsm_state2 );

    ap_CS_fsm = "0000010";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "particlemaster_Setup_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, start, "(port)start");
    sc_trace(mVcdFile, maximum, "(port)maximum");
    sc_trace(mVcdFile, maximum_ap_vld, "(port)maximum_ap_vld");
    sc_trace(mVcdFile, setup, "(port)setup");
    sc_trace(mVcdFile, setup_ap_vld, "(port)setup_ap_vld");
    sc_trace(mVcdFile, negativeFormula, "(port)negativeFormula");
    sc_trace(mVcdFile, c1, "(port)c1");
    sc_trace(mVcdFile, c2, "(port)c2");
    sc_trace(mVcdFile, cognitive, "(port)cognitive");
    sc_trace(mVcdFile, cognitive_ap_vld, "(port)cognitive_ap_vld");
    sc_trace(mVcdFile, social, "(port)social");
    sc_trace(mVcdFile, social_ap_vld, "(port)social_ap_vld");
    sc_trace(mVcdFile, particlemaster_setupDone_i, "(port)particlemaster_setupDone_i");
    sc_trace(mVcdFile, particlemaster_setupDone_o, "(port)particlemaster_setupDone_o");
    sc_trace(mVcdFile, particlemaster_setupDone_o_ap_vld, "(port)particlemaster_setupDone_o_ap_vld");
    sc_trace(mVcdFile, particlemaster_negFormula, "(port)particlemaster_negFormula");
    sc_trace(mVcdFile, particlemaster_negFormula_ap_vld, "(port)particlemaster_negFormula_ap_vld");
    sc_trace(mVcdFile, particlemaster_iterations, "(port)particlemaster_iterations");
    sc_trace(mVcdFile, particlemaster_iterations_ap_vld, "(port)particlemaster_iterations_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_3118_reg_364, "tmp_3118_reg_364");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, phitmp_fu_348_p2, "phitmp_fu_348_p2");
    sc_trace(mVcdFile, tmp_s_phi_fu_341_p4, "tmp_s_phi_fu_341_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_read_fu_252_p2, "tmp_read_fu_252_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, phitmp_fu_348_p0, "phitmp_fu_348_p0");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

particlemaster_Setup::~particlemaster_Setup() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void particlemaster_Setup::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state2;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_3118_reg_364 =  (sc_lv<1>) (negativeFormula.read());
    }
}

void particlemaster_Setup::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void particlemaster_Setup::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void particlemaster_Setup::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void particlemaster_Setup::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void particlemaster_Setup::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void particlemaster_Setup::thread_cognitive() {
    cognitive = c1.read();
}

void particlemaster_Setup::thread_cognitive_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cognitive_ap_vld = ap_const_logic_1;
    } else {
        cognitive_ap_vld = ap_const_logic_0;
    }
}

void particlemaster_Setup::thread_maximum() {
    maximum =  (sc_logic) (tmp_3118_reg_364.read()[0]);
}

void particlemaster_Setup::thread_maximum_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        maximum_ap_vld = ap_const_logic_1;
    } else {
        maximum_ap_vld = ap_const_logic_0;
    }
}

void particlemaster_Setup::thread_particlemaster_iterations() {
    particlemaster_iterations = ap_const_lv32_3C;
}

void particlemaster_Setup::thread_particlemaster_iterations_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        particlemaster_iterations_ap_vld = ap_const_logic_1;
    } else {
        particlemaster_iterations_ap_vld = ap_const_logic_0;
    }
}

void particlemaster_Setup::thread_particlemaster_negFormula() {
    particlemaster_negFormula = negativeFormula.read();
}

void particlemaster_Setup::thread_particlemaster_negFormula_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        particlemaster_negFormula_ap_vld = ap_const_logic_1;
    } else {
        particlemaster_negFormula_ap_vld = ap_const_logic_0;
    }
}

void particlemaster_Setup::thread_particlemaster_setupDone_o() {
    particlemaster_setupDone_o =  (sc_logic) (ap_const_lv1_1[0]);
}

void particlemaster_Setup::thread_particlemaster_setupDone_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        particlemaster_setupDone_o_ap_vld = ap_const_logic_1;
    } else {
        particlemaster_setupDone_o_ap_vld = ap_const_logic_0;
    }
}

void particlemaster_Setup::thread_phitmp_fu_348_p0() {
    phitmp_fu_348_p0 =  (sc_lv<1>) (particlemaster_setupDone_i.read());
}

void particlemaster_Setup::thread_phitmp_fu_348_p2() {
    phitmp_fu_348_p2 = (phitmp_fu_348_p0.read() ^ ap_const_lv1_1);
}

void particlemaster_Setup::thread_setup() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        setup =  (sc_logic) (ap_const_lv1_1[0]);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                !esl_seteq<1,1,1>(tmp_s_phi_fu_341_p4.read(), ap_const_lv1_0))) {
        setup =  (sc_logic) (ap_const_lv1_0[0]);
    } else {
        setup = sc_logic('X');
    }
}

void particlemaster_Setup::thread_setup_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !esl_seteq<1,1,1>(tmp_s_phi_fu_341_p4.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        setup_ap_vld = ap_const_logic_1;
    } else {
        setup_ap_vld = ap_const_logic_0;
    }
}

void particlemaster_Setup::thread_social() {
    social = c2.read();
}

void particlemaster_Setup::thread_social_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        social_ap_vld = ap_const_logic_1;
    } else {
        social_ap_vld = ap_const_logic_0;
    }
}

void particlemaster_Setup::thread_tmp_read_fu_252_p2() {
    tmp_read_fu_252_p2 =  (sc_lv<1>) (start.read());
}

void particlemaster_Setup::thread_tmp_s_phi_fu_341_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_read_fu_252_p2.read())) {
            tmp_s_phi_fu_341_p4 = ap_const_lv1_0;
        } else if (esl_seteq<1,1,1>(tmp_read_fu_252_p2.read(), ap_const_lv1_1)) {
            tmp_s_phi_fu_341_p4 = phitmp_fu_348_p2.read();
        } else {
            tmp_s_phi_fu_341_p4 = "X";
        }
    } else {
        tmp_s_phi_fu_341_p4 = "X";
    }
}

void particlemaster_Setup::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !esl_seteq<1,1,1>(tmp_s_phi_fu_341_p4.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

}

