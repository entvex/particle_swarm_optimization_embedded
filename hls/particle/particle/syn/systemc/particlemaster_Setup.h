// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _particlemaster_Setup_HH_
#define _particlemaster_Setup_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct particlemaster_Setup : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > start;
    sc_out< sc_logic > maximum;
    sc_out< sc_logic > maximum_ap_vld;
    sc_out< sc_logic > setup;
    sc_out< sc_logic > setup_ap_vld;
    sc_in< sc_logic > negativeFormula;
    sc_in< sc_lv<32> > c1;
    sc_in< sc_lv<32> > c2;
    sc_out< sc_lv<32> > cognitive;
    sc_out< sc_logic > cognitive_ap_vld;
    sc_out< sc_lv<32> > social;
    sc_out< sc_logic > social_ap_vld;
    sc_in< sc_logic > particlemaster_setupDone_i;
    sc_out< sc_logic > particlemaster_setupDone_o;
    sc_out< sc_logic > particlemaster_setupDone_o_ap_vld;
    sc_out< sc_logic > particlemaster_negFormula;
    sc_out< sc_logic > particlemaster_negFormula_ap_vld;
    sc_out< sc_lv<32> > particlemaster_iterations;
    sc_out< sc_logic > particlemaster_iterations_ap_vld;


    // Module declarations
    particlemaster_Setup(sc_module_name name);
    SC_HAS_PROCESS(particlemaster_Setup);

    ~particlemaster_Setup();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > tmp_3118_reg_364;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > phitmp_fu_348_p2;
    sc_signal< sc_lv<1> > tmp_s_phi_fu_341_p4;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_read_fu_252_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > phitmp_fu_348_p0;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_3C;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_cognitive();
    void thread_cognitive_ap_vld();
    void thread_maximum();
    void thread_maximum_ap_vld();
    void thread_particlemaster_iterations();
    void thread_particlemaster_iterations_ap_vld();
    void thread_particlemaster_negFormula();
    void thread_particlemaster_negFormula_ap_vld();
    void thread_particlemaster_setupDone_o();
    void thread_particlemaster_setupDone_o_ap_vld();
    void thread_phitmp_fu_348_p0();
    void thread_phitmp_fu_348_p2();
    void thread_setup();
    void thread_setup_ap_vld();
    void thread_social();
    void thread_social_ap_vld();
    void thread_tmp_read_fu_252_p2();
    void thread_tmp_s_phi_fu_341_p4();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
