-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity particlemaster_Setup is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    start : IN STD_LOGIC;
    maximum : OUT STD_LOGIC;
    maximum_ap_vld : OUT STD_LOGIC;
    setup : OUT STD_LOGIC;
    setup_ap_vld : OUT STD_LOGIC;
    negativeFormula : IN STD_LOGIC;
    c1 : IN STD_LOGIC_VECTOR (31 downto 0);
    c2 : IN STD_LOGIC_VECTOR (31 downto 0);
    cognitive : OUT STD_LOGIC_VECTOR (31 downto 0);
    cognitive_ap_vld : OUT STD_LOGIC;
    social : OUT STD_LOGIC_VECTOR (31 downto 0);
    social_ap_vld : OUT STD_LOGIC;
    particlemaster_setupDone_i : IN STD_LOGIC;
    particlemaster_setupDone_o : OUT STD_LOGIC;
    particlemaster_setupDone_o_ap_vld : OUT STD_LOGIC;
    particlemaster_negFormula : OUT STD_LOGIC;
    particlemaster_negFormula_ap_vld : OUT STD_LOGIC;
    particlemaster_iterations : OUT STD_LOGIC_VECTOR (31 downto 0);
    particlemaster_iterations_ap_vld : OUT STD_LOGIC );
end;


architecture behav of particlemaster_Setup is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal tmp_3118_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal phitmp_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_phi_fu_341_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_read_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal phitmp_fu_348_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_3118_reg_364 <= (0=>negativeFormula, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, tmp_s_phi_fu_341_p4, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and not((tmp_s_phi_fu_341_p4 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    cognitive <= c1;

    cognitive_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cognitive_ap_vld <= ap_const_logic_1;
        else 
            cognitive_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    maximum <= tmp_3118_reg_364(0);

    maximum_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            maximum_ap_vld <= ap_const_logic_1;
        else 
            maximum_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    particlemaster_iterations <= ap_const_lv32_3C;

    particlemaster_iterations_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            particlemaster_iterations_ap_vld <= ap_const_logic_1;
        else 
            particlemaster_iterations_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    particlemaster_negFormula <= negativeFormula;

    particlemaster_negFormula_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            particlemaster_negFormula_ap_vld <= ap_const_logic_1;
        else 
            particlemaster_negFormula_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    particlemaster_setupDone_o <= ap_const_logic_1;

    particlemaster_setupDone_o_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            particlemaster_setupDone_o_ap_vld <= ap_const_logic_1;
        else 
            particlemaster_setupDone_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    phitmp_fu_348_p0 <= (0=>particlemaster_setupDone_i, others=>'-');
    phitmp_fu_348_p2 <= (phitmp_fu_348_p0 xor ap_const_lv1_1);

    setup_assign_proc : process(tmp_s_phi_fu_341_p4, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            setup <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and not((tmp_s_phi_fu_341_p4 = ap_const_lv1_0)))) then 
            setup <= ap_const_logic_0;
        else 
            setup <= 'X';
        end if; 
    end process;


    setup_ap_vld_assign_proc : process(tmp_s_phi_fu_341_p4, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and not((tmp_s_phi_fu_341_p4 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            setup_ap_vld <= ap_const_logic_1;
        else 
            setup_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    social <= c2;

    social_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            social_ap_vld <= ap_const_logic_1;
        else 
            social_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_read_fu_252_p2 <= (0=>start, others=>'-');

    tmp_s_phi_fu_341_p4_assign_proc : process(phitmp_fu_348_p2, ap_CS_fsm_state2, tmp_read_fu_252_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((ap_const_lv1_0 = tmp_read_fu_252_p2)) then 
                tmp_s_phi_fu_341_p4 <= ap_const_lv1_0;
            elsif ((tmp_read_fu_252_p2 = ap_const_lv1_1)) then 
                tmp_s_phi_fu_341_p4 <= phitmp_fu_348_p2;
            else 
                tmp_s_phi_fu_341_p4 <= "X";
            end if;
        else 
            tmp_s_phi_fu_341_p4 <= "X";
        end if; 
    end process;

end behav;
